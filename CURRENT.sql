CREATE DATABASE RESTAURANT;
USE RESTAURANT;

CREATE TABLE CUSTOMER 
(
	CUST_ID INT NOT NULL PRIMARY KEY auto_increment, 
	CUST_NAME VARCHAR(20),
	VISIT INT DEFAULT 0
);

CREATE TABLE ITEM
(
	ITEM_ID INT NOT NULL PRIMARY KEY auto_increment,
	ITEM_NAME VARCHAR(20) NOT NULL,
	PRICE INT NOT NULL,
	UNIT_SALE INT DEFAULT 0
 );
 
 
 CREATE TABLE ORDERS
 (
	ORDER_ID INT NOT NULL,
    ITEM_ID INT NOT NULL ,
    CUST_ID INT NOT NULL ,
    QTY INT NOT NULL,
    PRICE INT NOT NULL DEFAULT 0,
    CONSTRAINT FK_1 FOREIGN KEY (ITEM_ID)
	references ITEM(ITEM_ID),
    CONSTRAINT FK_2 FOREIGN KEY (CUST_ID)
	references CUSTOMER(CUST_ID),
    PRIMARY KEY(ORDER_ID,ITEM_ID)
);

#DROP TABLE ORDERS;

CREATE TABLE ORDER_TIMMING
(
	CUST_ID INT NOT NULL ,
    ORDER_ID INT NOT NULL ,
    ORDER_TIME timestamp default current_timestamp,
    SERVE_TIME timestamp DEFAULT current_timestamp,
     CONSTRAINT FK_3 FOREIGN KEY (CUST_ID)
	references CUSTOMER(CUST_ID),
    CONSTRAINT FK_4 FOREIGN KEY (ORDER_ID)
	references ORDERS(ORDER_ID)
);

#DROP TABLE ORDER_TIMMING;
CREATE TABLE BILL_AMOUNT
(
	BILL_ID INT NOT NULL PRIMARY KEY auto_increment,
    ORDER_ID INT NOT NULL ,
    AMOUNT INT DEFAULT 0,
    CONSTRAINT FK_5 FOREIGN KEY (ORDER_ID)
	references ORDERS(ORDER_ID)
);
#drop TABLE BILL_AMOUNT;


#INSERT IN CUSTOMER TABLE
INSERT INTO CUSTOMER(CUST_NAME) VALUES('PIYUSH');
INSERT INTO CUSTOMER(CUST_NAME) VALUES('TARUN');
INSERT INTO CUSTOMER(CUST_NAME) VALUES('SATHYA');
INSERT INTO CUSTOMER(CUST_NAME) VALUES('MOHAN');
INSERT INTO CUSTOMER(CUST_NAME) VALUES('SUNNY');


#INSERT IN ITEM TABLE
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('TEA',10);
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('COFFEE',10);
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('MILK',10);
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('BISCUIT',10);
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('SAMOSA',10);
INSERT INTO ITEM(ITEM_NAME,PRICE) VALUES('COLD DRINK',10);


SELECT * FROM ITEM;


#TRIGGER 1 viSIT add AND ITEM PURCHASING

DELIMITER $$
CREATE  trigger VISIT_ADD_UNIT
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN 
	IF((SELECT COUNT(*) FROM ORDERS WHERE ORDER_ID=NEW.ORDER_ID)=0)
    THEN
		
		UPDATE CUSTOMER SET VISIT=VISIT+1 WHERE CUST_ID=NEW.CUST_ID;
        UPDATE ITEM SET UNIT_SALE=UNIT_SALE+NEW.QTY WHERE ITEM_ID=NEW.ITEM_ID;
        
    END IF;
    END $$
delimiter ;

#TRIGGER 2 INSERT IN ORDER_TIMMING TABLE

DELIMITER $$
CREATE  trigger ADD_TIMMING
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN 
	DECLARE PRC INT;
    
   IF((SELECT COUNT(*) FROM ORDERS WHERE ORDER_ID=NEW.ORDER_ID)=1)
    THEN
        INSERT INTO ORDER_TIMMING(CUST_ID,ORDER_ID,SERVE_TIME)VALUES(NEW.CUST_ID,NEW.ORDER_ID,null);
    END IF;
    END $$
delimiter ;



#trigger 3 dont allow order_id and customer_id differ
DELIMITER $$
CREATE trigger same_insert
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN 
	IF((SELECT COUNT(*) FROM ORDERS WHERE ORDER_ID=NEW.ORDER_ID)>0)
    THEN
		IF((SELECT COUNT(*) FROM ORDERS WHERE ORDER_ID=NEW.ORDER_ID AND CUST_ID=NEW.CUST_ID)=0)
        THEN
			signal sqlstate '45000';
		END IF;
	END IF;
    END $$
delimiter ;

# QUE 5  VIEW 1 vw_customerSnapshot

CREATE VIEW vw_customerSnapshot AS
SELECT * FROM CUSTOMER WHERE VISIT = (SELECT MAX(VISIT) FROM CUSTOMER);

		# SELECT * FROM vw_customerSnapshot

#QUE 5 VIEW 2 vw_OrderSnapshot

CREATE VIEW vw_OrderSnapshot AS
SELECT * FROM ITEM WHERE UNIT_SALE = (SELECT MAX(UNIT_SALE) FROM ITEM);

		# SELECT * FROM vw_OrderSnapshot;

#QUE 6 FUNCTION fn_GetOrderTimeElapsed(CustomerID)

DELIMITER $$
CREATE FUNCTION fn_GetOrderTimeElapsed(CustomerID INT)
RETURNS DATETIME
BEGIN
DECLARE DIFF DATETIME;
DECLARE ORDER_TIME DATETIME;
DECLARE SERVE_TIME DATETIME;
SET ORDER_TIME=(SELECT ORDER_TIMMING.ORDER_TIME FROM ORDER_TIMMING WHERE CUST_ID=CustomerID) ;
SET SERVE_TIME=(SELECT ORDER_TIMMING.SERVE_TIME FROM ORDER_TIMMING WHERE CUST_ID=CustomerID);
SET DIFF=TIMEDIFF(SERVE_TIME,ORDER_TIME);
RETURN DIFF;
END $$
DELIMITER ;

	#SELECT Fn_GetOrderTimeElapsed(1)e FROM ORDER_TIMMING;


#QUE 7 sp_GetOrder(IN CustomerID)
DELIMITER $$
CREATE PROCEDURE sp_GetOrder(IN CustomerID INT)
BEGIN
	DECLARE ID INT;
    SELECT ORDER_ID INTO ID FROM ORDERS WHERE CUST_ID=CustomerID LIMIT 1;
    SELECT * FROM ORDERS WHERE ORDER_ID=ID AND CUST_ID=CustomerID;
    
END $$
DELIMITER ;

#CALL SP_GETORDER(1);



# que 8 sp_GenerateBill(IN OrderID, OUT BillAMT)
 DELIMITER $$
 CREATE PROCEDURE sp_GenerateBill(IN OrderID INT, OUT BillAMT INT)
BEGIN
 DECLARE TOTAL INT;
 SELECT SUM(PRICE) INTO BillAMT FROM ORDERS WHERE ORDER_ID=OrderID;
INSERT INTO BILL_AMOUNT(ORDER_ID,AMOUNT) VALUES(OrderID,BillAMT);
END $$
DELIMITER ;

#CALL  sp_GenerateBill(1,@AMOUNT);

##ALL THREE FOR INSERT IN ORDER;

#FUNCTION TO GET TOTAL AMOUNT OF PARTICULAR ORD
DELIMITER $$
CREATE FUNCTION ITEM_PRICE(ID INT,QUA INT)
RETURNS INT
BEGIN
DECLARE PRC INT;
SET PRC=(SELECT PRICE FROM ITEM WHERE ITEM_ID=ID) ;
SET PRC=PRC*QUA;
RETURN PRC;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE INSERT_ORDER(IN ORDER_ID INT,IN ITEM_ID INT,IN CUST_ID INT, IN QTY INT)
BEGIN
INSERT INTO ORDERS VALUES(ORDER_ID,ITEM_ID,CUST_ID,QTY,ITEM_PRICE(ITEM_ID,QTY));
END $$
DELIMITER ;


CALL INSERT_ORDER(1,2,1,2);
CALL INSERT_ORDER(1,2,1,2);
CALL INSERT_ORDER(1,3,1,2);
CALL INSERT_ORDER(2,1,1,3);
CALL INSERT_ORDER(3,4,2,5);
CALL INSERT_ORDER(3,1,2,1);


CALL  sp_GenerateBill(1,@AMOUNT);
CALL  sp_GenerateBill(2,@AMOUNT);

SELECT * FROM BILL_AMOUNT;
